{"ast":null,"code":"import React,{useEffect,useState}from'react';import{useParams}from'react-router-dom';import axios from'axios';import'./Chatroom.css';import{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";const Chatroom=()=>{const{my_roomid,roomId}=useParams();const[messages,setMessages]=useState([]);const[newMessage,setNewMessage]=useState('');const[roomMessages,setRoomMessages]=useState([]);// 주기적으로 메시지를 가져오는 함수\nconst fetchMessages=async()=>{try{console.log(\"Fetching messages for roomId: \".concat(roomId));const response=await axios.get(\"/chatrooms/\".concat(my_roomid,\"/to/\").concat(roomId,\"/messages\"));console.log('Fetched messages:',response.data);if(Array.isArray(response.data)){setMessages(response.data);}else{console.error('Fetched data is not an array:',response.data);// 메세지를 받아올 때 isMyMessage 속성 설정\nconst processedMessages=response.data.map(msg=>({...msg,isMyMessage:msg.receiver_id===parseInt(roomId)&&msg.sender_id===parseInt(my_roomid)}));setMessages(processedMessages);}}catch(error){console.error('Error fetching messages:',error);}};useEffect(()=>{// 초기 메시지 로드\nfetchMessages();// 1초마다 fetchMessages 함수를 호출\nconst interval=setInterval(fetchMessages,100);// 컴포넌트가 언마운트될 때 인터벌 정리\nreturn()=>clearInterval(interval);},[my_roomid,roomId]);useEffect(()=>{if(Array.isArray(messages)&&messages.length){setRoomMessages(messages.filter(msg=>msg.receiver_id===parseInt(roomId)&&msg.sender_id===parseInt(my_roomid)||msg.receiver_id===parseInt(my_roomid)&&msg.sender_id===parseInt(roomId)));}},[messages,roomId,my_roomid]);const handleSendMessage=async()=>{if(newMessage.trim()==='')return;try{const sender_id=parseInt(my_roomid);const receiver_id=parseInt(roomId);// 현재 대화 상대방의 roomId로 사용됩니다.\nconsole.log('Sending message:',{sender_id,receiver_id,content:newMessage});// 백엔드에 새 메시지 보내기\nconst response=await axios.post(\"/chatrooms/\".concat(my_roomid,\"/to/\").concat(roomId,\"/messages\"),{sender_id,receiver_id,content:newMessage});console.log('Response:',response);//     // 메시지를 성공적으로 보낸 후 메시지 목록 업데이트\n//     setMessages((prevMessages) => [\n//       ...prevMessages,\n//       {\n//         sender_id,\n//         receiver_id,\n//         content: newMessage,\n//         isMyMessage: true,\n//       },\n//     ]);\n//     setNewMessage('');\n//   } catch (error) {\n//     console.error('Error sending message:', error);\n//   }\n// };\n// 메시지를 성공적으로 보낸 후 메시지 목록 업데이트\nconst newMsg={sender_id,receiver_id,content:newMessage,isMyMessage:true};// 기존 메시지에 추가하지 않고 새 배열로 설정하여 유지\nsetMessages(prevMessages=>[...prevMessages,newMsg]);setNewMessage('');}catch(error){console.error('Error sending message:',error);}};return/*#__PURE__*/_jsxs(\"div\",{className:\"chattingRoom\",children:[/*#__PURE__*/_jsx(\"div\",{className:\"chatroom-messages\",children:roomMessages.map((msg,index)=>/*#__PURE__*/_jsx(\"div\",{className:msg.isMyMessage?'my-message-container':'other-message-container',children:/*#__PURE__*/_jsx(\"p\",{className:msg.isMyMessage?'my-message':'other-message',children:msg.content})},index))}),/*#__PURE__*/_jsxs(\"div\",{className:\"msgsendItem\",children:[/*#__PURE__*/_jsx(\"div\",{className:\"inputMessage\",children:/*#__PURE__*/_jsx(\"input\",{type:\"text\",value:newMessage,onChange:e=>setNewMessage(e.target.value),placeholder:\"Typing your message\"})}),/*#__PURE__*/_jsx(\"button\",{onClick:handleSendMessage,className:\"sendmessageBtn\",children:\"Send\"})]})]});};export default Chatroom;","map":{"version":3,"names":["React","useEffect","useState","useParams","axios","jsx","_jsx","jsxs","_jsxs","Chatroom","my_roomid","roomId","messages","setMessages","newMessage","setNewMessage","roomMessages","setRoomMessages","fetchMessages","console","log","concat","response","get","data","Array","isArray","error","processedMessages","map","msg","isMyMessage","receiver_id","parseInt","sender_id","interval","setInterval","clearInterval","length","filter","handleSendMessage","trim","content","post","newMsg","prevMessages","className","children","index","type","value","onChange","e","target","placeholder","onClick"],"sources":["/Users/eunyi/Documents/3-2/DB/shop/front-end/src/components/chat/Chatroom.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport axios from 'axios';\nimport './Chatroom.css';\n\nconst Chatroom = () => {\n  const { my_roomid, roomId } = useParams();\n  const [messages, setMessages] = useState([]);\n  const [newMessage, setNewMessage] = useState('');\n  const [roomMessages, setRoomMessages] = useState([]);\n\n  // 주기적으로 메시지를 가져오는 함수\n  const fetchMessages = async () => {\n    try {\n      console.log(`Fetching messages for roomId: ${roomId}`);\n      const response = await axios.get(`/chatrooms/${my_roomid}/to/${roomId}/messages`);\n      console.log('Fetched messages:', response.data);\n      if (Array.isArray(response.data)) {\n        setMessages(response.data);\n      } else {\n        console.error('Fetched data is not an array:', response.data);\n        // 메세지를 받아올 때 isMyMessage 속성 설정\n        const processedMessages = response.data.map((msg) => ({\n          ...msg,\n          isMyMessage: msg.receiver_id === parseInt(roomId) && msg.sender_id === parseInt(my_roomid),\n        }));\n\n        setMessages(processedMessages);\n      }\n    } catch (error) {\n      console.error('Error fetching messages:', error);\n    }\n  };\n\n  useEffect(() => {\n    // 초기 메시지 로드\n    fetchMessages();\n\n    // 1초마다 fetchMessages 함수를 호출\n    const interval = setInterval(fetchMessages, 100);\n\n    // 컴포넌트가 언마운트될 때 인터벌 정리\n    return () => clearInterval(interval);\n  }, [my_roomid, roomId]);\n\n  useEffect(() => {\n    if (Array.isArray(messages) && messages.length) {\n      setRoomMessages(\n        messages.filter(\n          (msg) =>\n            (msg.receiver_id === parseInt(roomId) && msg.sender_id === parseInt(my_roomid)) ||\n            (msg.receiver_id === parseInt(my_roomid) && msg.sender_id === parseInt(roomId))\n        )\n      );\n    }\n  }, [messages, roomId, my_roomid]);\n\n  const handleSendMessage = async () => {\n    if (newMessage.trim() === '') return;\n    try {\n      const sender_id = parseInt(my_roomid);\n      const receiver_id = parseInt(roomId); // 현재 대화 상대방의 roomId로 사용됩니다.\n\n      console.log('Sending message:', {\n        sender_id,\n        receiver_id,\n        content: newMessage,\n      });\n\n      // 백엔드에 새 메시지 보내기\n      const response = await axios.post(`/chatrooms/${my_roomid}/to/${roomId}/messages`, {\n        sender_id,\n        receiver_id,\n        content: newMessage,\n      });\n\n      console.log('Response:', response);\n\n      //     // 메시지를 성공적으로 보낸 후 메시지 목록 업데이트\n      //     setMessages((prevMessages) => [\n      //       ...prevMessages,\n      //       {\n      //         sender_id,\n      //         receiver_id,\n      //         content: newMessage,\n      //         isMyMessage: true,\n      //       },\n      //     ]);\n      //     setNewMessage('');\n      //   } catch (error) {\n      //     console.error('Error sending message:', error);\n      //   }\n      // };\n\n      // 메시지를 성공적으로 보낸 후 메시지 목록 업데이트\n      const newMsg = {\n        sender_id,\n        receiver_id,\n        content: newMessage,\n        isMyMessage: true,\n      };\n\n      // 기존 메시지에 추가하지 않고 새 배열로 설정하여 유지\n      setMessages((prevMessages) => [...prevMessages, newMsg]);\n      setNewMessage('');\n    } catch (error) {\n      console.error('Error sending message:', error);\n    }\n  };\n\n  return (\n    <div className=\"chattingRoom\">\n      <div className=\"chatroom-messages\">\n        {roomMessages.map((msg, index) => (\n          <div key={index} className={msg.isMyMessage ? 'my-message-container' : 'other-message-container'}>\n            <p className={msg.isMyMessage ? 'my-message' : 'other-message'}>{msg.content}</p>\n          </div>\n        ))}\n      </div>\n      <div className=\"msgsendItem\">\n        <div className=\"inputMessage\">\n          <input\n            type=\"text\"\n            value={newMessage}\n            onChange={(e) => setNewMessage(e.target.value)}\n            placeholder=\"Typing your message\"\n          />\n        </div>\n        <button onClick={handleSendMessage} className=\"sendmessageBtn\">\n          Send\n        </button>\n      </div>\n    </div>\n  );\n};\n\nexport default Chatroom;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}