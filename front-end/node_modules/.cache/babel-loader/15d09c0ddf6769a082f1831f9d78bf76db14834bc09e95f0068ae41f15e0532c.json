{"ast":null,"code":"var _jsxFileName = \"/Users/eunyi/Documents/3-2/DB/shop/front-end/src/components/chat/Chatroom.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport axios from 'axios';\nimport './Chatroom.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Chatroom = () => {\n  _s();\n  const {\n    my_roomid,\n    roomId\n  } = useParams();\n  const [messages, setMessages] = useState([]);\n  const [newMessage, setNewMessage] = useState('');\n  const [roomMessages, setRoomMessages] = useState([]);\n\n  // 주기적으로 메시지를 가져오는 함수\n  const fetchMessages = async () => {\n    try {\n      console.log(`Fetching messages for roomId: ${roomId}`);\n      const response = await axios.get(`/chatrooms/${my_roomid}/to/${roomId}/messages`);\n      console.log('Fetched messages:', response.data);\n      if (Array.isArray(response.data)) {\n        setMessages(response.data);\n      } else {\n        console.error('Fetched data is not an array:', response.data);\n        // 메세지를 받아올 때 isMyMessage 속성 설정\n        const processedMessages = response.data.map(msg => ({\n          ...msg,\n          isMyMessage: msg.receiver_id === parseInt(roomId) && msg.sender_id === parseInt(my_roomid)\n        }));\n        setMessages(processedMessages);\n      }\n    } catch (error) {\n      console.error('Error fetching messages:', error);\n    }\n  };\n  useEffect(() => {\n    // 초기 메시지 로드\n    fetchMessages();\n\n    // 1초마다 fetchMessages 함수를 호출\n    const interval = setInterval(fetchMessages, 100);\n\n    // 컴포넌트가 언마운트될 때 인터벌 정리\n    return () => clearInterval(interval);\n  }, [my_roomid, roomId]);\n  useEffect(() => {\n    if (Array.isArray(messages) && messages.length) {\n      setRoomMessages(messages.filter(msg => msg.receiver_id === parseInt(roomId) && msg.sender_id === parseInt(my_roomid) || msg.receiver_id === parseInt(my_roomid) && msg.sender_id === parseInt(roomId)));\n    }\n  }, [messages, roomId, my_roomid]);\n  const handleSendMessage = async () => {\n    if (newMessage.trim() === '') return;\n    try {\n      const sender_id = parseInt(my_roomid);\n      const receiver_id = parseInt(roomId); // 현재 대화 상대방의 roomId로 사용됩니다.\n\n      console.log('Sending message:', {\n        sender_id,\n        receiver_id,\n        content: newMessage\n      });\n\n      // 백엔드에 새 메시지 보내기\n      const response = await axios.post(`/chatrooms/${my_roomid}/to/${roomId}/messages`, {\n        sender_id,\n        receiver_id,\n        content: newMessage\n      });\n      console.log('Response:', response);\n\n      //     // 메시지를 성공적으로 보낸 후 메시지 목록 업데이트\n      //     setMessages((prevMessages) => [\n      //       ...prevMessages,\n      //       {\n      //         sender_id,\n      //         receiver_id,\n      //         content: newMessage,\n      //         isMyMessage: true,\n      //       },\n      //     ]);\n      //     setNewMessage('');\n      //   } catch (error) {\n      //     console.error('Error sending message:', error);\n      //   }\n      // };\n\n      // 메시지를 성공적으로 보낸 후 메시지 목록 업데이트\n      const newMsg = {\n        sender_id,\n        receiver_id,\n        content: newMessage,\n        isMyMessage: true\n      };\n\n      // 기존 메시지에 추가하지 않고 새 배열로 설정하여 유지\n      setMessages(prevMessages => [...prevMessages, newMsg]);\n      setNewMessage('');\n    } catch (error) {\n      console.error('Error sending message:', error);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"chattingRoom\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chatroom-messages\",\n      children: roomMessages.map((msg, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: msg.isMyMessage ? 'my-message-container' : 'other-message-container',\n        children: /*#__PURE__*/_jsxDEV(\"p\", {\n          className: msg.isMyMessage ? 'my-message' : 'other-message',\n          children: msg.content\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 116,\n          columnNumber: 13\n        }, this)\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"msgsendItem\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"inputMessage\",\n        children: /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          value: newMessage,\n          onChange: e => setNewMessage(e.target.value),\n          placeholder: \"Typing your message\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 122,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 121,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleSendMessage,\n        className: \"sendmessageBtn\",\n        children: \"Send\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 129,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 112,\n    columnNumber: 5\n  }, this);\n};\n_s(Chatroom, \"FYFy6Xy2J6ZJU+cn/sYVg7RUfwQ=\", false, function () {\n  return [useParams];\n});\n_c = Chatroom;\nexport default Chatroom;\nvar _c;\n$RefreshReg$(_c, \"Chatroom\");","map":{"version":3,"names":["React","useEffect","useState","useParams","axios","jsxDEV","_jsxDEV","Chatroom","_s","my_roomid","roomId","messages","setMessages","newMessage","setNewMessage","roomMessages","setRoomMessages","fetchMessages","console","log","response","get","data","Array","isArray","error","processedMessages","map","msg","isMyMessage","receiver_id","parseInt","sender_id","interval","setInterval","clearInterval","length","filter","handleSendMessage","trim","content","post","newMsg","prevMessages","className","children","index","fileName","_jsxFileName","lineNumber","columnNumber","type","value","onChange","e","target","placeholder","onClick","_c","$RefreshReg$"],"sources":["/Users/eunyi/Documents/3-2/DB/shop/front-end/src/components/chat/Chatroom.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport axios from 'axios';\nimport './Chatroom.css';\n\nconst Chatroom = () => {\n  const { my_roomid, roomId } = useParams();\n  const [messages, setMessages] = useState([]);\n  const [newMessage, setNewMessage] = useState('');\n  const [roomMessages, setRoomMessages] = useState([]);\n\n  // 주기적으로 메시지를 가져오는 함수\n  const fetchMessages = async () => {\n    try {\n      console.log(`Fetching messages for roomId: ${roomId}`);\n      const response = await axios.get(`/chatrooms/${my_roomid}/to/${roomId}/messages`);\n      console.log('Fetched messages:', response.data);\n      if (Array.isArray(response.data)) {\n        setMessages(response.data);\n      } else {\n        console.error('Fetched data is not an array:', response.data);\n        // 메세지를 받아올 때 isMyMessage 속성 설정\n        const processedMessages = response.data.map((msg) => ({\n          ...msg,\n          isMyMessage: msg.receiver_id === parseInt(roomId) && msg.sender_id === parseInt(my_roomid),\n        }));\n\n        setMessages(processedMessages);\n      }\n    } catch (error) {\n      console.error('Error fetching messages:', error);\n    }\n  };\n\n  useEffect(() => {\n    // 초기 메시지 로드\n    fetchMessages();\n\n    // 1초마다 fetchMessages 함수를 호출\n    const interval = setInterval(fetchMessages, 100);\n\n    // 컴포넌트가 언마운트될 때 인터벌 정리\n    return () => clearInterval(interval);\n  }, [my_roomid, roomId]);\n\n  useEffect(() => {\n    if (Array.isArray(messages) && messages.length) {\n      setRoomMessages(\n        messages.filter(\n          (msg) =>\n            (msg.receiver_id === parseInt(roomId) && msg.sender_id === parseInt(my_roomid)) ||\n            (msg.receiver_id === parseInt(my_roomid) && msg.sender_id === parseInt(roomId))\n        )\n      );\n    }\n  }, [messages, roomId, my_roomid]);\n\n  const handleSendMessage = async () => {\n    if (newMessage.trim() === '') return;\n    try {\n      const sender_id = parseInt(my_roomid);\n      const receiver_id = parseInt(roomId); // 현재 대화 상대방의 roomId로 사용됩니다.\n\n      console.log('Sending message:', {\n        sender_id,\n        receiver_id,\n        content: newMessage,\n      });\n\n      // 백엔드에 새 메시지 보내기\n      const response = await axios.post(`/chatrooms/${my_roomid}/to/${roomId}/messages`, {\n        sender_id,\n        receiver_id,\n        content: newMessage,\n      });\n\n      console.log('Response:', response);\n\n      //     // 메시지를 성공적으로 보낸 후 메시지 목록 업데이트\n      //     setMessages((prevMessages) => [\n      //       ...prevMessages,\n      //       {\n      //         sender_id,\n      //         receiver_id,\n      //         content: newMessage,\n      //         isMyMessage: true,\n      //       },\n      //     ]);\n      //     setNewMessage('');\n      //   } catch (error) {\n      //     console.error('Error sending message:', error);\n      //   }\n      // };\n\n      // 메시지를 성공적으로 보낸 후 메시지 목록 업데이트\n      const newMsg = {\n        sender_id,\n        receiver_id,\n        content: newMessage,\n        isMyMessage: true,\n      };\n\n      // 기존 메시지에 추가하지 않고 새 배열로 설정하여 유지\n      setMessages((prevMessages) => [...prevMessages, newMsg]);\n      setNewMessage('');\n    } catch (error) {\n      console.error('Error sending message:', error);\n    }\n  };\n\n  return (\n    <div className=\"chattingRoom\">\n      <div className=\"chatroom-messages\">\n        {roomMessages.map((msg, index) => (\n          <div key={index} className={msg.isMyMessage ? 'my-message-container' : 'other-message-container'}>\n            <p className={msg.isMyMessage ? 'my-message' : 'other-message'}>{msg.content}</p>\n          </div>\n        ))}\n      </div>\n      <div className=\"msgsendItem\">\n        <div className=\"inputMessage\">\n          <input\n            type=\"text\"\n            value={newMessage}\n            onChange={(e) => setNewMessage(e.target.value)}\n            placeholder=\"Typing your message\"\n          />\n        </div>\n        <button onClick={handleSendMessage} className=\"sendmessageBtn\">\n          Send\n        </button>\n      </div>\n    </div>\n  );\n};\n\nexport default Chatroom;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}